
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated_examples/1-advanced/01-llpr.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_examples_1-advanced_01-llpr.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_examples_1-advanced_01-llpr.py:

.. _llprexample:

Computing LLPR uncertainties
============================

This tutorial demonstrates how to train a model with uncertainties using metatrain.
It involves the computation of the uncertainties on ethanol molecules, using the
last-layer prediction rigidity (`LLPR <LLPR_>`_) approximation. Both total and local
(`LPR <LPR_>`_) uncertainties are computed

.. _LLPR: https://arxiv.org/html/2403.02251v1
.. _LPR: https://pubs.acs.org/doi/10.1021/acs.jctc.3c00704

The baseline model was trained using the following training options, where the training
set consists of 100 structures from the QM9 dataset.

.. literalinclude:: options-model.yaml
   :language: yaml

Once a model is trained, you can add LLPR uncertainties to it by launching a training
run with the "llpr" architecture, on the same data. In this case, the training options
to add LLPR uncertainties are as follows:

.. literalinclude:: options-llpr.yaml
   :language: yaml

Adding LLPR uncertainties is very cheap compared to training a model, as it only
involves one pass through the training data (equivalent to one epoch of training).

You can repeat the same training yourself with

.. GENERATED FROM PYTHON SOURCE LINES 35-46

.. code-block:: Python


    import subprocess

    import ase.io
    import matplotlib.pyplot as plt
    from ase.visualize.plot import plot_atoms
    from matplotlib.colors import LogNorm
    from metatomic.torch import ModelOutput
    from metatomic.torch.ase_calculator import MetatomicCalculator









.. GENERATED FROM PYTHON SOURCE LINES 47-48

We first train the baseline model without uncertainties and then the LLPR model.

.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: Python


    # Here, we run training as a subprocess, in reality you would run this from the command
    # line, e.g. ``mtt train options-model.yaml -o model.pt``.
    subprocess.run(["mtt", "train", "options-model.yaml", "-o", "model.pt"], check=True)
    subprocess.run(["mtt", "train", "options-llpr.yaml", "-o", "model-llpr.pt"], check=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    CompletedProcess(args=['mtt', 'train', 'options-llpr.yaml', '-o', 'model-llpr.pt'], returncode=0)



.. GENERATED FROM PYTHON SOURCE LINES 56-63

A detailed step-by-step introduction on how to train a model is provided in
the :ref:`label_basic_usage` tutorial.

As an example, we will compute the energies and uncertainties of the LLPR model on a
few ethanol structures.

Next we load 5 ethanol structures

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: Python

    structures = ase.io.read("ethanol_reduced_100.xyz", ":5")








.. GENERATED FROM PYTHON SOURCE LINES 67-68

and load the model as an ASE calculator

.. GENERATED FROM PYTHON SOURCE LINES 69-91

.. code-block:: Python

    calc = MetatomicCalculator(
        "model-llpr.pt", extensions_directory="extensions/", device="cpu"
    )

    # the uncertainties are available throguh the ``run_model`` method of the calculator
    predictions = calc.run_model(
        structures,
        {
            "energy": ModelOutput(per_atom=False),
            "energy_uncertainty": ModelOutput(per_atom=False),
        },
    )

    # print the energies and uncertainties

    energies = predictions["energy"].block().values.squeeze().numpy()
    uncertainties = predictions["energy_uncertainty"].block().values.squeeze().numpy()

    print(energies)
    print(uncertainties)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-154.97468067 -154.97642503 -154.97632212 -154.97600337 -154.97451059]
    [0.00973584 0.01553096 0.02451746 0.014474   0.01356143]




.. GENERATED FROM PYTHON SOURCE LINES 92-94

We can also obtain per-atom uncertainties (local prediction rigidity, LPR). As an
example, we will compute the uncertainties on an ethanol structure.

.. GENERATED FROM PYTHON SOURCE LINES 95-123

.. code-block:: Python


    structure = structures[0]
    predictions = calc.run_model(
        structure,
        {
            # here, we use per_atom=True to request per-atom uncertainties
            "energy_uncertainty": ModelOutput(per_atom=True),
        },
    )
    local_uncertainty = predictions["energy_uncertainty"].block().values.squeeze().numpy()
    local_uncertainty = local_uncertainty * 1000.0  # convert from eV to meV

    norm = LogNorm(vmin=min(local_uncertainty), vmax=max(local_uncertainty))
    colormap = plt.get_cmap("viridis")
    colors = colormap(norm(local_uncertainty))
    ax = plot_atoms(structure, colors=colors, rotation="180x,0y,0z")
    custom_ticks = [0.7, 0.8, 0.9, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]
    cbar = plt.colorbar(
        plt.cm.ScalarMappable(norm=norm, cmap=colormap),
        ax=ax,
        label="Local energy uncertainty (meV)",
        ticks=custom_ticks,
    )
    cbar.ax.set_yticklabels([f"{tick}" for tick in custom_ticks])
    cbar.minorticks_off()
    ax.set_xticks([])
    ax.set_yticks([])
    plt.show()



.. image-sg:: /generated_examples/1-advanced/images/sphx_glr_01-llpr_001.png
   :alt: 01 llpr
   :srcset: /generated_examples/1-advanced/images/sphx_glr_01-llpr_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 26.263 seconds)


.. _sphx_glr_download_generated_examples_1-advanced_01-llpr.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01-llpr.ipynb <01-llpr.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01-llpr.py <01-llpr.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 01-llpr.zip <01-llpr.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
