[tox]
min_version = 4.0
# these are the default environments, i.e. the list of tests running when you
# execute `tox` in the command-line without anything else
envlist =
    lint
    build
    tests
    gap-tests
    soap-bpnn-tests
    pet-tests
    nanopet-tests

[testenv]
package = editable
passenv = *
lint_folders =
    "{toxinidir}/developer/" \
    "{toxinidir}/examples/" \
    "{toxinidir}/src/" \
    "{toxinidir}/tests/" \
    "{toxinidir}/docs/src/"
# We apply stricter checks on the main code, but not on tests, examples, or
# external architectures
lint_strict_folders = 
    "{toxinidir}/src/metatrain/cli" \
    "{toxinidir}/src/metatrain/utils" \
    "{toxinidir}/src/metatrain/llpr" \
    "{toxinidir}/src/metatrain/pet" \
    "{toxinidir}/src/metatrain/gap" \
    "{toxinidir}/src/metatrain/soap_bpnn"
exclude_tests_regex = "(^|/)[^/]*test[^/]*$"
exclude_tests_glob = "**/*test*"
[testenv:lint]
description = Run linters and type checks
package = skip
deps =
    ruff
    mypy
    sphinx-lint
    yamlfix
    pydoclint
commands =
    ruff format --diff {[testenv]lint_folders}
    ruff check {[testenv]lint_folders}
    python {toxinidir}/developer/jsonfix.py --check {[testenv]lint_folders}
    yamlfix --check {[testenv]lint_folders} -e "**/outputs/**"
    mypy {[testenv]lint_folders}
    sphinx-lint \
        --enable all \
        --disable line-too-long \
        -i "{toxinidir}/docs/src/examples" \
        {[testenv]lint_folders} "{toxinidir}/README.md"
    # Stricter checks on the main code
    # Check type annotations
    mypy --exclude {[testenv]exclude_tests_regex} \
        --disallow-untyped-defs \
        {[testenv]lint_strict_folders}
    # Check docstrings match with function signature
    pydoclint \
        --exclude {[testenv]exclude_tests_regex} \
        --style sphinx \
        --check-return-types f \
        --arg-type-hints-in-docstring f \
        --skip-checking-raises t \
        --check-class-attributes f \
        --skip-checking-short-docstrings f \
        {[testenv]lint_strict_folders}
    # Ensure all public functions have docstrings, except tests
    ruff check --preview \
        --exclude {[testenv]exclude_tests_glob} \
        --select D103 \
        {[testenv]lint_strict_folders}

[testenv:format]
description = Abuse tox to do actual formatting on all files.
package = skip
deps =
    ruff
    yamlfix
commands =
    ruff format {[testenv]lint_folders}
    ruff check --fix-only {[testenv]lint_folders} "{toxinidir}/README.md" {posargs}
    python {toxinidir}/developer/jsonfix.py {[testenv]lint_folders}
    yamlfix {[testenv]lint_folders} -e "**/outputs/**"

[testenv:tests]
description = Run basic package tests with pytest (not the architectures)
passenv = *
deps =
    pytest
    pytest-cov
    pytest-xdist
    spherical  # for nanoPET spherical target
    torch-pme  # for long-range tests
    # wandb # XXX(rg): fix later
    cmake
changedir = tests
extras =  # architectures used in the package tests
    pet
setenv =
    COVERAGE_RUN = 1
allowlist_externals = bash
commands_pre =
    python -m pip install --no-build-isolation sphericart torch-spex>=0.1,<0.2 wigners
    bash {toxinidir}/tests/resources/generate-outputs.sh
commands =
    pytest \
        --numprocesses=auto \
        --cov=metatrain \
        --cov-append \
        --cov-report= \
        --import-mode=append \
        {posargs}

[testenv:build]
description = builds the package and checks integrity
usedevelop = true
deps =
    build
    check-manifest
    twine
allowlist_externals = bash
commands_pre =
    bash -c "rm -f dist/*.whl"
    bash -c "rm -f dist/*.tar.gz"
    # these files are created by other tests but make `check-manifest` fail
    bash -c "find . -name 'model_0.ckpt' -delete"
commands =
    python -m build
    twine check dist/*.tar.gz dist/*.whl
    check-manifest {toxinidir}

[testenv:soap-bpnn-tests]
description = Run SOAP-BPNN tests with pytest
passenv = *
deps =
    pytest
    spherical  # tensor target tests
    cmake
changedir = src/metatrain/soap_bpnn/tests/
commands =
    python -m pip install --no-build-isolation sphericart torch-spex>=0.1,<0.2 wigners cmake
    pytest {posargs}


[testenv:pet-tests]
description = Run PET tests with pytest
passenv = *
deps =
    pytest
extras = pet
changedir = src/metatrain/pet/tests/
commands =
    pytest {posargs}

[testenv:gap-tests]
description = Run GAP tests with pytest
passenv = *
deps =
    pytest
extras = gap
changedir = src/metatrain/gap/tests/
commands =
    pytest {posargs}

[testenv:nanopet-tests]
description = Run NanoPET tests with pytest
passenv = *
deps =
    pytest
    spherical  # for nanoPET spherical target
extras = nanopet
changedir = src/metatrain/deprecated/nanopet/tests/
commands =
    pytest {posargs}

[testenv:llpr]
description = Run LLPR tests with pytest
passenv = *
deps =
    pytest
extras = llpr
changedir = src/metatrain/experimental/llpr/tests/
commands =
    pytest {posargs}

[testenv:docs]
description = builds the documentation with sphinx
deps =
    -r docs/requirements.txt
    cmake
allowlist_externals = bash
extras = # these models are used in the documentation
    gap
commands =
    python -m pip install --no-build-isolation sphericart torch-spex>=0.1,<0.2 wigners
    # Run example and usage scripts.
    bash -c "set -e && cd {toxinidir}/examples/basic_usage && bash usage.sh"
    bash -c "set -e && cd {toxinidir}/examples/ase && bash train.sh"
    bash -c "set -e && cd {toxinidir}/examples/llpr && bash train.sh"
    bash -c "set -e && cd {toxinidir}/examples/zbl && bash train.sh"
    sphinx-build \
        {posargs:-E} \
        --builder html \
        --doctree-dir docs/build/doctree \
        --fail-on-warning \
        docs/src docs/build/html

[testenv:cuda]
description = tests that CUDA is available
passenv = *
deps =
    torch
commands =
    python -c "import torch; assert(torch.cuda.is_available() and torch.version.cuda)"

[testenv:hip]
description = tests that HIP is available
passenv = *
deps =
    torch
commands =
    python -c "import torch; assert(torch.cuda.is_available() and torch.version.hip)"
